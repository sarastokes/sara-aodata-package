classdef Epoch < sara.epochs.Epoch 
% EPOCH 
%
% Description:
%   An epoch of data acquisition on the one photon AOSLO
%
% Superclasses:
%   sara.epochs.Epoch

% By Sara Patterson, 2023 (sara-aodata-package)
% -------------------------------------------------------------------------

    methods 
        function obj = Epoch(varargin)
            obj = obj@sara.epochs.Epoch(varargin{:});
        end
    end

    methods (Static)
        function value = specifyAttributes()
            value = specifyAttributes@sara.Epoch();

            doubleScalar = {"Size", "(1,1)", "Class", "double"};
            intScalar = {"Size", "(1,1)", "Class", "uint8"};

            value.add("FieldOfView",...
                "Size", "(1,2)", "Class", "double", ...
                "Function", {mustBePositive},...
                "Units", "degrees of visual angle",...
                "Description", "Field of view for imaging");
            value.add("FluorescenceImagingWindow",...
                "Size", "(1,4)", "Class", "double",...
                "Function", {mustBeInteger, mustBePositive},... 
                "Units", "pixels",... 
                "Description", "Fluorescence imaging window extent [x y length width]");
            value.add("ReflectanceImagingWindow", ...
                "Size", "(1,4)", "Class", "double", ...
                "Function", {mustBeInteger, mustBePositive}, ...
                "Units", "pixels", ...
                "Description", "Reflectance imaging window extent [x y length width]");
            value.add("ImagingLightIntensity", doubleScalar{:}, ...
                "Function", @(x) mustBeInRange(x, 0, 100), "Units", "percent", ...
                "Units", "percent",...
                "Description", "AOM value for the fluorescence imaging light");
            value.add("ReflectancePmtGain", doubleScalar{:},...
                "Function", @(x) mustBeInteger(x, 0, 1), "Units", "normalized",...
                "Description", "PMT gain for the reflectance channel");
            value.add("FluorescencePmtGain", doubleScalar{:}, ...
                "Function", @(x) mustBeInRange(x, 0,1), "Units", "normalized",...
                "Description", "PMT gain for the fluorescence channel");
            value.add("ReflectanceAdcGain", intScalar{:},...
                "Description", "ADC gain for the reflectance channel");
            value.add("ReflectanceAdcOffset", intScalar{:}, ...
                "Description", "ADC offset for the reflectance channel");
            value.add("FluorescenceAdcGain", intScalar{:}, ...
                "Description", "ADC gain for the fluorescence channel");
            value.add("FluorescenceAdcOffset", intScalar{:}, ...
                "Description", "ADC offset for the fluorescence channel");
        end
    end
end 